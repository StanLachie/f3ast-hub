generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model MenuCategory {
  id           Int        @id @default(autoincrement())
  name         String
  sortingIndex Int
  restaurantId Int
  active       Boolean    @default(true)
  description  String?
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  MenuItems    MenuItem[]
}

model MenuItem {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  categoryId   Int?
  active       Boolean       @default(true)
  img          String?
  sortingIndex Int
  MenuCategory MenuCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Restaurant {
  id               Int            @id @default(autoincrement())
  active           Boolean        @default(false)
  name             String
  address          String
  bio              String?
  banner           String?
  logo             String?
  instagram        String?
  facebook         String?
  twitter          String?
  phone            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  slug             String         @unique
  published        Boolean        @default(false)
  theme            String         @default("default")
  tiktok           String?
  stripeCustomerId String         @unique @default("")
  Users            User[]
  MenuCategory     MenuCategory[]
  Subscription     Subscription?
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  paused
}

model Subscription {
  id                   Int                @id @default(autoincrement())
  stripeSubscriptionId String             @unique
  stripeCustomerId     String
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  canceledAt           DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  restaurantId         Int                @unique
  Restaurant           Restaurant         @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id                 String      @id
  email              String
  emailVerified      Boolean
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  sessions           Session[]
  accounts           Account[]
  stripeId           String?
  restaurantId       Int?
  name               String
  firstName          String
  lastName           String
  promotional_emails Boolean     @default(false)
  Restaurant         Restaurant? @relation(fields: [restaurantId], references: [id])

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
